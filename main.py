from dotenv import load_dotenv

load_dotenv()

import os
import base64
import json
import io
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse, StreamingResponse
from openai import OpenAI
from openpyxl import Workbook
from datetime import datetime
from azure.core.credentials import AzureKeyCredential
from azure.ai.documentintelligence import DocumentIntelligenceClient

app = FastAPI()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
endpoint = os.getenv("AZURE_DOC_INTELLIGENCE_URL")
key = os.getenv("AZURE_DOC_INTELLIGENCE_KEY")

document_intelligence_client = DocumentIntelligenceClient(
    endpoint=endpoint, credential=AzureKeyCredential(key)
)

PROMPT = """
Olvasd be a felt√∂lt√∂tt PDF dokumentum teljes tartalm√°t, akkor is, ha t√∂bb oldalas a dokumentum.

A dokumentum egy sz√°mla. A feladatod, hogy kinyerd bel≈ële az al√°bbi adatokat:

- sz√°mlasz√°m
- vev≈ë neve
- sz√°ll√≠t√≥ neve
- vev≈ë ad√≥sz√°ma
- sz√°ll√≠t√≥ ad√≥sz√°ma
- teljes√≠t√©s d√°tuma
- sz√°mla kelte
- fizet√©si hat√°rid≈ë
- brutt√≥ √∂sszeg (√∂sszesen)
- nett√≥ √∂sszeg (√∂sszesen)
- √°fa √∂sszege (√∂sszesen)
- devizanem

Ezen fel√ºl, ha a sz√°ml√°n t√∂bb t√©tel szerepel, azokat is add vissza egy 'tetelek' nev≈± t√∂mbben.
Minden t√©tel egy objektum legyen a k√∂vetkez≈ë szerkezettel:
{
  "megnevezes": "",
  "netto": "",
  "afa": "",
  "afakulcs": "",
  "brutto": ""
}

‚ùóFontos szab√°ly:
Az √∂sszegekhez (p√©ld√°ul brutt√≥, nett√≥, √°fa) **soha ne √≠rd hozz√° a devizanemet** (p√©ld√°ul HUF, EUR, Ft, ‚Ç¨ stb.).
Az √∂sszegek √©rt√©ke csak a sz√°m legyen, form√°z√°s √©s devizajel n√©lk√ºl (p√©ld√°ul "5730.88" vagy "573088").
A devizanem k√ºl√∂n mez≈ëben szerepeljen a "devizanem" kulcs alatt.

A v√°laszt **csak j√≥l form√°zott JSON** form√°tumban add meg az al√°bbi szerkezet szerint:

{
  "szamlaszam": "",
  "vevo_neve": "",
  "szallito_neve": "",
  "vevo_adoszam": "",
  "szallito_adoszam": "",
  "teljesites_datuma": "",
  "szamla_keltee": "",
  "fizetesi_hatarido": "",
  "brutto_osszeg": "",
  "netto_osszeg": "",
  "afa_osszeg": "",
  "devizanem": "",
  "tetelek": [
    {
      "megnevezes": "",
      "netto": "",
      "afa": "",
      "afakulcs": "",
      "brutto": ""
    }
  ]
}

Ha egy adat vagy t√©tel b√°rmely mez≈ëje nem tal√°lhat√≥, az √©rt√©ke legyen √ºres string ("").
Ne adj vissza semmit, csak a JSON-t.
"""


@app.post("/import/gpt-5")
async def import_invoice(files: list[UploadFile] = File(...)):

    if not files:
        raise HTTPException(status_code=400, detail="Legal√°bb egy PDF f√°jlt t√∂lts fel!")

    wb = Workbook()
    ws_invoices = wb.active
    ws_invoices.title = "Sz√°ml√°k"
    ws_items = wb.create_sheet("T√©telek")

    # Fejl√©cek
    invoice_headers = [
        "szamlaszam",
        "vevo_neve",
        "szallito_neve",
        "vevo_adoszam",
        "szallito_adoszam",
        "teljesites_datuma",
        "szamla_keltee",
        "fizetesi_hatarido",
        "brutto_osszeg",
        "netto_osszeg",
        "afa_osszeg",
        "devizanem",
    ]
    ws_invoices.append(invoice_headers)

    item_headers = ["szamlaszam", "megnevezes", "netto", "afa", "afakulcs", "brutto"]
    ws_items.append(item_headers)

    # Feldolgoz√°s minden f√°jlra
    for file in files:
        if file.content_type != "application/pdf":
            raise HTTPException(
                status_code=400, detail=f"{file.filename} nem PDF f√°jl!"
            )

        file_bytes = await file.read()
        base64_string = base64.b64encode(file_bytes).decode("utf-8")

        # OpenAI feldolgoz√°s
        response = client.responses.create(
            model="gpt-5",
            input=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "input_file",
                            "filename": file.filename,
                            "file_data": f"data:application/pdf;base64,{base64_string}",
                        },
                        {"type": "input_text", "text": PROMPT},
                    ],
                },
            ],
        )

        text = response.output_text.strip()

        try:
            data = json.loads(text)
        except json.JSONDecodeError:
            raise HTTPException(
                status_code=500,
                detail=f"{file.filename} feldolgoz√°sa sikertelen, nem √©rv√©nyes JSON.",
            )

        # Fejl√©cadatok hozz√°ad√°sa a "Sz√°ml√°k" munkalaphoz
        ws_invoices.append([data.get(h, "") for h in invoice_headers])

        # T√©telek hozz√°ad√°sa a "T√©telek" munkalaphoz
        szamlaszam = data.get("szamlaszam", "")
        for item in data.get("tetelek", []):
            ws_items.append(
                [
                    szamlaszam,
                    item.get("megnevezes", ""),
                    item.get("netto", ""),
                    item.get("afa", ""),
                    item.get("afakulcs", ""),
                    item.get("brutto", ""),
                ]
            )

    # Excel ment√©se mem√≥ri√°ba
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    filename = f"invoices_{timestamp}.xlsx"

    return StreamingResponse(
        output,
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": f"attachment; filename={filename}"},
    )


@app.post("/import/azure-ai")
async def import_invoice(file: UploadFile = File(...)):
    file_bytes = await file.read()

    # Base64 k√≥dol√°s az Azure API-hoz
    base64_encoded = base64.b64encode(file_bytes).decode("utf-8")

    poller = document_intelligence_client.begin_analyze_document(
        model_id="prebuilt-invoice",
        body={"base64Source": base64_encoded},
    )

    result = poller.result()

    wb = Workbook()
    ws_headers = wb.active
    ws_headers.title = "Sz√°ml√°k"
    ws_items = wb.create_sheet("T√©telek")
    # ws_tables = wb.create_sheet("T√©telek (t√°bla)")

    invoice_headers_written = False
    item_headers_written = False
    table_headers_written = False

    for invoice in result.documents:
        fields = invoice.fields or {}

        # Sz√°mla mez≈ëk dinamikusan
        invoice_data = {}
        for key, field in fields.items():
            value = (
                field.value
                if hasattr(field, "value")
                else field.content if hasattr(field, "content") else ""
            )
            invoice_data[key] = str(value)

        if not invoice_headers_written:
            ws_headers.append(list(invoice_data.keys()))
            invoice_headers_written = True

        ws_headers.append(list(invoice_data.values()))

        # T√©telmez≈ëk (Items)
        items = fields.get("Items")
        if items and items.value_array:
            for item in items.value_array:
                item_obj = item.value_object
                item_data = {}
                for k, v in item_obj.items():
                    val = (
                        v.value
                        if hasattr(v, "value")
                        else v.content if hasattr(v, "content") else ""
                    )
                    item_data[k] = str(val)

                # Els≈ë alkalommal: oszlopnevek
                if not item_headers_written:
                    ws_items.append(["InvoiceId"] + list(item_data.keys()))
                    item_headers_written = True

                ws_items.append(
                    [invoice_data.get("InvoiceId", "")] + list(item_data.values())
                )

    # # üÜï T√°bl√°zatos t√©telek beolvas√°sa a "tables" kulcsb√≥l
    # if result.tables:
    #     for table in result.tables:
    #         rows = table.row_count
    #         cols = table.column_count
    #         cells = table.cells

    #         # Cell√°k m√°trixba
    #         matrix = [["" for _ in range(cols)] for _ in range(rows)]
    #         for cell in cells:
    #             r = cell.row_index
    #             c = cell.column_index
    #             matrix[r][c] = cell.content

    #         # Fejl√©c
    #         headers = matrix[0]

    #         if not table_headers_written:
    #             ws_tables.append(headers)
    #             table_headers_written = True

    #         for row in matrix[1:]:
    #             ws_tables.append(row)

    if result.tables:
        # üÜï √ñsszes t√°bl√°zat egym√°s ut√°n egy munkalapon ("√ñsszes t√°bla")
        ws_all_tables = wb.create_sheet("√ñsszes t√°bla")
        table_headers_written = False

        for table in result.tables:
            rows = table.row_count
            cols = table.column_count
            cells = table.cells

            # Cell√°k m√°trixba szervez√©se
            matrix = [["" for _ in range(cols)] for _ in range(rows)]
            for cell in cells:
                r = cell.row_index
                c = cell.column_index
                matrix[r][c] = cell.content

            # Fejl√©c: els≈ë sor a t√°bl√°ban
            headers = matrix[0]

            # Egyszer √≠rjuk ki a fejl√©cet, az els≈ë t√°bla alapj√°n
            if not table_headers_written:
                ws_all_tables.append(headers)
                table_headers_written = True

            # Adatsorokat hozz√°adni (fejl√©cen k√≠v√ºli sorokat)
            for row in matrix[1:]:
                ws_all_tables.append(row)

            # √úres sor t√°bl√°k k√∂z√© elv√°laszt√≥nak (opcion√°lis)
            ws_all_tables.append([])

    # Excel ment√©se
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"invoice_data_{timestamp}.xlsx"

    return StreamingResponse(
        output,
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": f"attachment; filename={filename}"},
    )
